nav.horizontalNavigation {
  > ul {
    display: flex;

    > li {
      margin-bottom: 0;

      > a,
      > span,
      > strong {
        &.submenu {
          @if $ls-pseudo-element-for-toggler-icons == after {
            padding-right: 1.6rem;
          } @else {
            padding-left: 1.6rem;
          }
          position: relative;

          @if $ls-pseudo-element-for-toggler-icons == after {
            &::after {
              @include iconStyleClosed;
              right: 0;
            }
          } @else {
            &::before {
              @include iconStyleClosed;
              left: 0;
            }
          }
        }
      }

      &.touched {
        > a.submenu {
          @if $ls-pseudo-element-for-toggler-icons == after {
            &::after {
              @include iconStyleOpen;
            }
          } @else {
            &::before {
              @include iconStyleOpen;
            }
          }
        }
      }

      &:not(:last-child) {
        margin-right: 1.6rem;
      }

      &:last-child {
        margin-bottom: 0;
      }

      > ul {
        position: absolute;
        height: 0;
        overflow: hidden;
        width: 100%;
        left: 0;
        right: 0;
        display: flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        background-color: $ls-color-6;
        box-shadow: $ls-shadow-l;

        /* -->
         * top and bottom padding would not work well with the height animation because if it is not animated
         * separately (which can't be done easily) it appears and disappears instantly which makes the animation
         * seem "jumpy". As a workaround, we only set the desired left and right padding directly on the ul element
         * and we create the upper and lower padding by adding ::before and ::after pseudo elements which create
         * the upper and lower distance with their height.
         */
        padding: 0 3rem;

        &::before,
        &::after {
          content: "";
          height: 3rem;
          width: 100%;
        }
        /*
         * <--
         */

        > li {
          padding: 3rem;
          margin-left: 0;

          > ul {
            > li {
              margin-left: 0;
            }
          }
        }
      }
    }
  }

  &:not(.dropdown) {
    > ul > li > ul > li {
      > a,
      > span,
      > strong {
        font-weight: $ls-font-weight-bold;
        display: block;
        border-bottom: 0.1rem solid $ls-border-color-1;
      }
    }
  }

  &:not(.useTouchNaviOnNonTouchDevices) {
    > ul {
      > li {
        &:hover {
          > ul {
            height: auto;
          }
        }
      }
    }
  }

  &.useTouchNaviOnNonTouchDevices {
    li.submenu {
      > span,
      > strong {
        cursor: pointer;
      }
    }
  }
}

nav.horizontalNavigation.dropdown {
  ul {
    z-index: 1;
  }

  > ul {
    li {
      position: relative;
      white-space: nowrap;
    }

    > li {
      > ul {
        position: absolute;
        background-color: $ls-color-6;
        box-shadow: $ls-shadow-l;
        padding: 0 3rem;

        ul {
          margin-left: 1rem;
        }
      }

      ul {
        display: flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        width: unset;
        left: unset;
        right: unset;
        top: 100%;

        li {
          padding: 0;
          margin-left: 0;
          display: inline-block;
          width: 100%;
        }
      }
    }
  }
}