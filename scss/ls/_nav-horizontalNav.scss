@mixin dropdownSecondLevelUlTouchedOrHover(){

}

@mixin dropdownThirdLevelUlTouchedOrHover(){

}

@mixin navFoldIconsHorizontalFirstLevel() {
  > a,
  > strong {
    &.submenu {
      padding-right: 1.6rem;
      position: relative;

      &::after {
        @extend .fa;
        content: fa-content($fa-var-plus);
        position: absolute;
        right: 0.32rem;
        top: 0.72rem;
        font-size: 50%;
      }
    }
  }

  &.touched {
    > a.submenu::after {
      content: fa-content($fa-var-minus);
    }
  }
}

@mixin navFoldIconsDropdown() {
  a.submenu {
    padding-right: 1.6rem;
    position: relative;

    &::after {
      @extend .fa;
      content: fa-content($fa-var-plus);
      position: absolute;
      right: 0.32rem;
      top: 1.12rem;
      font-size: 50%;
    }
  }

  &.touched {
    > a.submenu::after {
      content: fa-content($fa-var-minus);
    }
  }
}


nav.horizontalNavigation {
  > ul {
    display: flex;

    > li {
      margin-bottom: 0;

      @include navFoldIconsHorizontalFirstLevel;

      &:not(:last-child) {
        margin-right: 1.6rem;
      }

      &:last-child {
        margin-bottom: 0;
      }

      > ul {
        position: absolute;
        //visibility: hidden;
        width: 100%;
        left: 0;
        right: 0;
        display: flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        background-color: $ls-color-6;
        box-shadow: $ls-shadow-l;

        /* -->
         * top and bottom padding would not work well with the height animation because if it is not animated
         * separately (which can't be done easily) it appears and disappears instantly which makes the animation
         * seem "jumpy". As a workaround, we only set the desired left and right padding directly on the ul element
         * and we create the upper and lower padding by adding ::before and ::after pseudo elements which create
         * the upper and lower distance with their height.
         */
        padding: 0 3rem;

        &::before,
        &::after {
          content: "";
          height: 3rem;
          width: 100%;
        }
        /*
         * <--
         */

        > li {
          padding: 3rem;
          margin-left: 0;

          > a,
          > span,
          > strong {
            font-weight: $ls-font-weight-bold;
            display: block;
            border-bottom: 0.1rem solid $ls-border-color-1;
          }

          > ul {
            > li {
              margin-left: 0;
            }
          }
        }
      }

      &.touched {
        > ul {
          //visibility: visible;
        }
      }
    }
  }

  &:not(.useTouchNaviOnNonTouchDevices) {
    > ul {
      > li {
        &:hover {
          > ul {
            //visibility: visible;
          }
        }
      }
    }
  }

  &.useTouchNaviOnNonTouchDevices {
    li.submenu {
      > strong {
        cursor: pointer;
      }
    }
  }
}

nav.horizontalNavigation.dropdown {
  ul {
    z-index: 1;
  }

  > ul {
    li {
      position: relative;
      white-space: nowrap;

      @include navFoldIconsDropdown;
    }

    > li {
      ul {
        display: flex;
        justify-content: flex-start;
        flex-wrap: wrap;
        width: unset;
        left: unset;
        right: unset;
        top: 100%;

        position: absolute;
        background-color: $ls-color-6;
        box-shadow: $ls-shadow-l;
        padding: 0 3rem;

        li {
          padding: 0;
          margin-left: 0;
          display: inline-block;

          > a,
          > span,
          > strong {
            font-weight: $ls-font-weight-normal;
            border-bottom: none;
            display: inline-block;
            padding-right: $ls-nav-dropdown-horizontal-distance;

            &.trail,
            &.active {
              font-weight: $ls-font-weight-bold;
            }
          }
        }
      }

      > ul {
        > li {
          > ul {
            top: $ls-nav-dropdown-vertical-offset;
            left: 100%;
          }
        }
      }

      &.touched {
        > ul {
          overflow: visible !important;
          //@include dropdownSecondLevelUlTouchedOrHover;

          li {
            &.touched {
              > ul {
                //@include dropdownThirdLevelUlTouchedOrHover;
              }
            }
          }
        }
      }
    }
  }

  &:not(.useTouchNaviOnNonTouchDevices) {
    > ul {
      > li {
        &:hover {
          > ul {
            //@include dropdownSecondLevelUlTouchedOrHover;

            li {
              &:hover {
                > ul {
                  //@include dropdownThirdLevelUlTouchedOrHover;
                }
              }
            }
          }
        }
      }
    }
  }
}